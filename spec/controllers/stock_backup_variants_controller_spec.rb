# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe StockBackupVariantsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # StockBackupVariant. As you add validations to StockBackupVariant, be sure to
  # adjust the attributes here as well.
  let(:store_membership) { create(:store_membership) }
  let(:user) { store_membership.user }
  let(:valid_attributes) {
    {
      variant_id:      create(:variant,
                              provider: create(:provider, store: store_membership.store),
                              product:  create(
                                :product,
                                store:        store_membership.store,
                                manufacturer: create(:manufacturer, store: store_membership.store),
                                category:     create(:category, store: store_membership.store)
                              )).id,
      stock_backup_id: create(:stock_backup, store: store_membership.store).id
    }}
  let(:duplicate_valid_attributes) {
    {
      variant_id:      create(:variant,
                              provider: create(:provider, store: store_membership.store),
                              product:  create(
                                :product,
                                store:        store_membership.store,
                                manufacturer: create(:manufacturer, store: store_membership.store),
                                category:     create(:category, store: store_membership.store)
                              )).id,
      stock_backup_id: create(:stock_backup, store: store_membership.store).id
    }}

  describe 'GET #index' do
    it 'returns a success response' do
      StockBackupVariant.create! valid_attributes
      request.headers.merge! user.create_new_auth_token
      get :index, params: {}
      expect(response).to be_success
    end

    it 'filters by stock backup' do
      StockBackupVariant.create! valid_attributes
      StockBackupVariant.create! duplicate_valid_attributes
      request.headers.merge! user.create_new_auth_token
      get :index, params: {stock_backup_id: valid_attributes[:stock_backup_id]}
      expect(response).to be_success
      expect(JSON.parse(response.body).size).to eq(1)
      get :index, params: {}
      expect(response).to be_success
      expect(JSON.parse(response.body).size).to eq(2)
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      stock_backup_variant = StockBackupVariant.create! valid_attributes
      request.headers.merge! user.create_new_auth_token
      get :show, params: {id: stock_backup_variant.to_param}
      expect(response).to be_success
    end
  end
end
